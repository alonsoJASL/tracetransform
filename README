This is a C++ implementation of the Trace Transform algorithm, with support for
orthonormal circus functionals. Relevant papers are:
 * A. Kadyrov and M. Petrou, The trace transform and its applications
 * M. Petrou and A. Kadyrov, Affine invariant features from the trace transform
 * A. Frías-Velézquez et al., Object identification by using orthonormal circus
   functions from the trace transform

This implementation features CUDA kernels to alleviate most of the compute-heavy
parts of the algorithm to the GPU. There are some restrictions though:
 * The implementation of scan() is pretty naive, and uses a separate thread for
   each row of the padded image. This means that big images require big GPUs.
 * SVD is pretty complex, so we use CULA's sgesvd implementation.


How to build
------------

Requirements are:
 * C/C++ compiler (tested: GCC 4.6)
 * Eigen 3
 * Boost (tested: >= 1.52)
 * CMake >= 2.8.7
 * CULA Dense (tested: R17)

The basic procedure to build this port is as following:
 $ mkdir build
 $ cd build
 $ cmake ../ -DCMAKE_BUILD_TYPE=Release
 $ make

If your system compiler is not supported by CUDA, which is quite likely, you
will need to install a supported compiler and instruct CMake to use that one
(see below).

Some additional notes:
 * In order to use a different compiler, specify -DCMAKE_C_COMPILER and
   -DCMAKE_CXX_COMPILER
 * If you want debugging symbols, use -DCMAKE_BUILD_TYPE=Debug
 * If you want to make use of MKL, define MKLROOT and re-configure the project.
   In order to get a functional binary, you might want to bake the MKL library
   paths, reported by CMake as LD_LIBRARY_PATH, into your final binary using
   -DCMAKE_EXE_LINKER_FLAGS="-Wl,-rpath=${LIBRARY_PATH}"

How to run
----------

In order to see the full help, use:
 $ ./demo --help
